# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CGTasLePh4iulHEcHPotp0nFKAb_Bc2N

Thesis Software: Meta-learning Framework for Missing Data Imputation
Author: Haya Abu Shawish
Date: October, 2025

This script predicts the most suitable imputation techniques for a dataset
based on meta-features using a trained meta-classifier.
"""

import argparse
import pandas as pd
import joblib


def predict_top_k(model, meta_data, top_k=5):
    # model.predict_proba should return probabilities for each class
    probs = model.predict_proba(meta_data)[0]
    classes = model.classes_

    # Sort classes by probability
    ranked = sorted(zip(classes, probs), key=lambda x: x[1], reverse=True)
    return [cls for cls, _ in ranked[:top_k]]



def main():
    parser = argparse.ArgumentParser(description="Meta-dataset guided imputation technique recommendation")
    parser.add_argument("--input", type=str, required=True, help="Path to meta-dataset CSV file")
    parser.add_argument("--model", type=str, default="models/SHF_MVI_model.pkl",
                        help="Path to trained model file (.pkl)")
    parser.add_argument("--top", type=int, default=5, help="Number of top techniques to recommend")



    args = parser.parse_args()

    # Load dataset
    data = pd.read_csv(args.input)

    # Load trained model
    model = joblib.load(args.model)

    # Predict top-k
    recommendations = predict_top_k(model, data, top_k=args.top)

    print(f"Top {args.top} recommended imputation techniques:")
    for i, method in enumerate(recommendations, start=1):
        print(f"{i}. {method}")

if __name__ == "__main__":
    main()