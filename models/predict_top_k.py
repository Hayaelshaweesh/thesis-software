# -*- coding: utf-8 -*-
"""predict_top_k.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TG9WQNMsoCAj-_SLqKjik4LdLg8OgAN7
"""

import argparse
import pandas as pd
import pickle
import numpy as np

def predict_top_k(model, data, top_k=5):
    # Predict probabilities and get top-k indices
    probs = model.predict_proba(data)
    top_indices = np.argsort(probs, axis=1)[:, ::-1][:, :top_k]
    return top_indices

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--input", type=str, required=True, help="Path to input CSV")
    parser.add_argument("--model", type=str, required=True, help="Trained model path")
    parser.add_argument("--encoder", type=str, required=True, help="Encoder path")
    parser.add_argument("--scaler", type=str, required=True, help="Scaler path")
    parser.add_argument("--columns", type=str, required=True, help="Column info path")
    parser.add_argument("--top", type=int, default=5, help="Top-k recommendations")
    args = parser.parse_args()

    # Load data
    data = pd.read_csv(args.input)

    # Load artifacts
    with open(args.model, "rb") as f:
        model = pickle.load(f)
    with open(args.encoder, "rb") as f:
        encoder = pickle.load(f)
    with open(args.scaler, "rb") as f:
        scaler = pickle.load(f)
    with open(args.columns, "rb") as f:
        col_info = pickle.load(f)

    cat_cols = col_info["cat_cols"]
    num_cols = col_info["num_cols"]

    # Encode categorical columns
    if len(cat_cols) > 0:
        data[cat_cols] = encoder.transform(data[cat_cols])

    # Scale numeric columns
    data[num_cols] = scaler.transform(data[num_cols])

    # Ensure correct column order
    data = data[cat_cols + num_cols] if len(cat_cols) > 0 else data[num_cols]

    # Predict top-k
    top_preds = predict_top_k(model, data, top_k=args.top)

    # Convert indices to labels
    if hasattr(model, "classes_"):
        top_labels = model.classes_[top_preds]
    else:
        top_labels = top_preds

    print("Top-k recommendations per sample:")
    for i, labels in enumerate(top_labels):
        print(f"Sample {i+1}: {labels}")

if __name__ == "__main__":
    main()